// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentParserClient is the client API for PaymentParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentParserClient interface {
	GetTransactions(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*Response, error)
}

type paymentParserClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentParserClient(cc grpc.ClientConnInterface) PaymentParserClient {
	return &paymentParserClient{cc}
}

func (c *paymentParserClient) GetTransactions(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.PaymentParser/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentParserServer is the server API for PaymentParser service.
// All implementations must embed UnimplementedPaymentParserServer
// for forward compatibility
type PaymentParserServer interface {
	GetTransactions(context.Context, *FileRequest) (*Response, error)
	mustEmbedUnimplementedPaymentParserServer()
}

// UnimplementedPaymentParserServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentParserServer struct {
}

func (UnimplementedPaymentParserServer) GetTransactions(context.Context, *FileRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedPaymentParserServer) mustEmbedUnimplementedPaymentParserServer() {}

// UnsafePaymentParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentParserServer will
// result in compilation errors.
type UnsafePaymentParserServer interface {
	mustEmbedUnimplementedPaymentParserServer()
}

func RegisterPaymentParserServer(s grpc.ServiceRegistrar, srv PaymentParserServer) {
	s.RegisterService(&PaymentParser_ServiceDesc, srv)
}

func _PaymentParser_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentParserServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PaymentParser/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentParserServer).GetTransactions(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentParser_ServiceDesc is the grpc.ServiceDesc for PaymentParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PaymentParser",
	HandlerType: (*PaymentParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactions",
			Handler:    _PaymentParser_GetTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
